/* Generated By:JavaCC: Do not edit this line. JSON_ParserConstants.java */
/*
 * (c) Copyright 2008 Hewlett-Packard Development Company, LP
 * All rights reserved.
 */

package org.openjena.atlas.json.io.parserjavacc.javacc ;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JSON_ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WS = 2;
  /** RegularExpression Id. */
  int ECHAR = 3;
  /** RegularExpression Id. */
  int QUOTE_3D = 4;
  /** RegularExpression Id. */
  int QUOTE_3S = 5;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 6;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 7;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG1 = 8;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG2 = 9;
  /** RegularExpression Id. */
  int DIGITS = 10;
  /** RegularExpression Id. */
  int INTEGER = 11;
  /** RegularExpression Id. */
  int DECIMAL = 12;
  /** RegularExpression Id. */
  int DOUBLE = 13;
  /** RegularExpression Id. */
  int POSITIVE_INTEGER = 14;
  /** RegularExpression Id. */
  int POSITIVE_DECIMAL = 15;
  /** RegularExpression Id. */
  int POSITIVE_DOUBLE = 16;
  /** RegularExpression Id. */
  int NEGATIVE_INTEGER = 17;
  /** RegularExpression Id. */
  int NEGATIVE_DECIMAL = 18;
  /** RegularExpression Id. */
  int NEGATIVE_DOUBLE = 19;
  /** RegularExpression Id. */
  int EXPONENT = 20;
  /** RegularExpression Id. */
  int TRUE = 21;
  /** RegularExpression Id. */
  int FALSE = 22;
  /** RegularExpression Id. */
  int NULL = 23;
  /** RegularExpression Id. */
  int LBRACE = 24;
  /** RegularExpression Id. */
  int RBRACE = 25;
  /** RegularExpression Id. */
  int LBRACKET = 26;
  /** RegularExpression Id. */
  int RBRACKET = 27;
  /** RegularExpression Id. */
  int LPAREN = 28;
  /** RegularExpression Id. */
  int RPAREN = 29;
  /** RegularExpression Id. */
  int COMMA = 30;
  /** RegularExpression Id. */
  int COLON = 31;
  /** RegularExpression Id. */
  int PLUS = 32;
  /** RegularExpression Id. */
  int MINUS = 33;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<WS>",
    "<ECHAR>",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERAL_LONG1>",
    "<STRING_LITERAL_LONG2>",
    "<DIGITS>",
    "<INTEGER>",
    "<DECIMAL>",
    "<DOUBLE>",
    "<POSITIVE_INTEGER>",
    "<POSITIVE_DECIMAL>",
    "<POSITIVE_DOUBLE>",
    "<NEGATIVE_INTEGER>",
    "<NEGATIVE_DECIMAL>",
    "<NEGATIVE_DOUBLE>",
    "<EXPONENT>",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
  };

}
